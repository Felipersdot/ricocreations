import 'reflect-metadata';
import { Class } from '../support/Class';
import { JsogObject } from '../model/JsogObject';
/**
 * JavaScript Object Graph Service.
 *
 * Instances of this class can be used to serialize and deserialize Objects
 * Graphs to and from Json.
 */
export declare class JsogService {
    private log;
    /**
     * Property Key for JavaScript Object Graph References.
     */
    refKey: string;
    /**
     * Property key where JavaScript Object Graph Identifieres.
     */
    idKey: string;
    /**
     * Temporary added property key to store JavaScript Object Graph
     * Identifiers while serializing.
     */
    private identifiedObjectKey;
    /**
     * Flag to enable debug output.
     */
    debugEnabled: boolean;
    /**
     * Test if object has a custom Jsonification function.
     *
     * @param object to test.
     */
    private hasCustomJsonificaiton(object);
    /**
     * Test if the object is an Array.
     *
     * @param object to test.
     */
    private isArray(object);
    /**
     * Removes all elements from an Array.
     *
     * @param array to clear
     */
    private clearArray(array);
    /**
     * Get the defined Class of an object.
     *
     * The Property needs to be annotated.
     *
     * @param target Object to find Class of propertyKey for.
     * @param propertyKey Property name to find Class for.
     */
    private getClass(target, propertyKey);
    /**
     * Get the JavaScript Object Graph Identifiere of object.
     */
    private getJsogId(object);
    /**
     * Get the JavaScript Object Reference of object.
     */
    private getJsogRef(object);
    /**
     * Serialize an Object to a JavaScript Object Graph.
     *
     * If an Object in the Graph has a custom toJSON function this is used for serialization.
     *
     * @param object to serialize.
     */
    serialize<T>(object: T): JsogObject & T;
    /**
     * Deserialize an JavaScript Object Graph Array.
     *
     * @param jsogObject Array of JsogObjects.
     * @param clazz Class to instantiant the array entries with.
     */
    deserializeArray<T extends object>(jsogObject: JsogObject[], clazz?: Class<T>): T[];
    /**
     * Deserialize an JavaScript Object Graph.
     *
     * @param jsogObject JavaScript Object Graph root.
     * @param clazz Class to intantiate the root with.
     */
    deserializeObject<T extends object>(jsogObject: JsogObject, clazz?: Class<T>): T;
    deserialize<T extends object>(jsogObject: JsogObject | JsogObject[], classObject?: Class<T>): T | T[];
}
