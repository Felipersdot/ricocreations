"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Support
require("reflect-metadata");
// Logger
var Logger_1 = require("../log/Logger");
/**
 * JavaScript Object Graph Service.
 *
 * Instances of this class can be used to serialize and deserialize Objects
 * Graphs to and from Json.
 */
var JsogService = (function () {
    function JsogService() {
        // ------------------------------------------------------------------------
        // Private fields
        // ------------------------------------------------------------------------
        this.log = Logger_1.Logger.getInstance();
        // ------------------------------------------------------------------------
        // Public fields
        // ------------------------------------------------------------------------
        /**
         * Property Key for JavaScript Object Graph References.
         */
        this.refKey = '@ref';
        /**
         * Property key where JavaScript Object Graph Identifieres.
         */
        this.idKey = '@id';
        /**
         * Temporary added property key to store JavaScript Object Graph
         * Identifiers while serializing.
         */
        this.identifiedObjectKey = '__jsogObjectId';
    }
    Object.defineProperty(JsogService.prototype, "debugEnabled", {
        get: function () {
            return this.log.debugEnabled;
        },
        /**
         * Flag to enable debug output.
         */
        set: function (debugEnabled) {
            this.log.debugEnabled = debugEnabled;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Test if object has a custom Jsonification function.
     *
     * @param object to test.
     */
    JsogService.prototype.hasCustomJsonificaiton = function (object) {
        return typeof object.toJSON === 'function';
    };
    /**
     * Test if the object is an Array.
     *
     * @param object to test.
     */
    JsogService.prototype.isArray = function (object) {
        return Object.prototype.toString.call(object) === '[object Array]';
    };
    /**
     * Removes all elements from an Array.
     *
     * @param array to clear
     */
    JsogService.prototype.clearArray = function (array) {
        array.length = 0;
    };
    /**
     * Get the defined Class of an object.
     *
     * The Property needs to be annotated.
     *
     * @param target Object to find Class of propertyKey for.
     * @param propertyKey Property name to find Class for.
     */
    JsogService.prototype.getClass = function (target, propertyKey) {
        return Reflect.getMetadata('design:type', target, propertyKey);
    };
    /**
     * Get the JavaScript Object Graph Identifiere of object.
     */
    JsogService.prototype.getJsogId = function (object) {
        var id = object[this.idKey];
        // be defensive if someone uses numbers in violation of the spec
        if (id) {
            id = id.toString();
        }
        return id;
    };
    /**
     * Get the JavaScript Object Reference of object.
     */
    // TODO: Find a better way to type JsogReference.
    JsogService.prototype.getJsogRef = function (object) {
        var ref = object[this.refKey];
        // Be defensive if someone uses numbers in violation of the spec
        if (ref) {
            ref = ref.toString();
        }
        return ref;
    };
    /**
     * Serialize an Object to a JavaScript Object Graph.
     *
     * If an Object in the Graph has a custom toJSON function this is used for serialization.
     *
     * @param object to serialize.
     */
    JsogService.prototype.serialize = function (object) {
        var _this = this;
        this.log.debug('serialize:');
        this.log.debug(object);
        /**
         * Reset nextId to one.
         */
        var nextId = 1;
        // Serialized objects by id.
        var serializedById = [];
        // Holds references to all touched objects.
        var allOriginal = [];
        /**
         * Get the JSOG id of one object. Set the id if neccesarry.
         *
         * @param obj Object in object graph.
         */
        var getIdOf = function (obj) {
            if (!obj.__jsogObjectId) {
                obj.__jsogObjectId = nextId++;
                allOriginal.push(obj);
            }
            return obj.__jsogObjectId;
        };
        /**
         * Recursive Serialization function.
         *
         * @param original Any object.
         */
        var serializeRecursive = function (original) {
            /**
             * Serialize an Object.
             *
             * @param original An Object to Serialize.
             */
            var serializeObject = function (original) {
                var result = {};
                var id = getIdOf(original);
                // If this object was already serialized
                // we return an JsogReference.
                if (serializedById[id]) {
                    result[_this.refKey] = id.toString();
                    return result;
                }
                // ... and hold a reference locally to find it later.
                serializedById[id] = result;
                // Serialize the object...
                for (var _i = 0, _a = Object.keys(original); _i < _a.length; _i++) {
                    var key = _a[_i];
                    if (key !== _this.identifiedObjectKey) {
                        result[key] = serializeRecursive(original[key]);
                    }
                }
                // ... add the JSOG key ...
                result[_this.idKey] = id.toString();
                return result;
            };
            /**
             * Serialize every element of an array.
             *
             * @param array to serialize
             */
            var serializeArray = function (array) {
                var allEncoded = [];
                for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
                    var entry = array_1[_i];
                    allEncoded.push(serializeRecursive(entry));
                }
                return allEncoded;
            };
            if (!original) {
                return original;
            }
            else if (_this.hasCustomJsonificaiton(original)) {
                return original;
            }
            else if (_this.isArray(original)) {
                return serializeArray(original);
            }
            else if (typeof original === 'object') {
                return serializeObject(original);
            }
            else {
                return original;
            }
        };
        // Call recursive serialization.
        var result = serializeRecursive(object);
        // Remove temporary object identifieres.
        allOriginal.forEach(function (element) {
            delete element.__jsogObjectId;
        });
        this.clearArray(serializedById);
        return result;
    };
    /**
     * Deserialize an JavaScript Object Graph Array.
     *
     * @param jsogObject Array of JsogObjects.
     * @param clazz Class to instantiant the array entries with.
     */
    JsogService.prototype.deserializeArray = function (jsogObject, clazz) {
        return this.deserialize(jsogObject, clazz);
    };
    /**
     * Deserialize an JavaScript Object Graph.
     *
     * @param jsogObject JavaScript Object Graph root.
     * @param clazz Class to intantiate the root with.
     */
    JsogService.prototype.deserializeObject = function (jsogObject, clazz) {
        return this.deserialize(jsogObject, clazz);
    };
    JsogService.prototype.deserialize = function (jsogObject, classObject) {
        var _this = this;
        this.log.debug('deserialize:');
        this.log.debug(jsogObject);
        this.log.debug('as class:');
        this.log.debug(classObject);
        // Map of found objects by identifier.
        var found = {};
        var deserializeRecursive = function (jsogObject, classObject) {
            _this.log.debug('deserializeRecursive:');
            _this.log.debug(jsogObject);
            _this.log.debug('as class:');
            _this.log.debug(classObject);
            var deserializeObject = function (jsogObject, classObject) {
                _this.log.debug('deserializeObject:');
                _this.log.debug(jsogObject);
                _this.log.debug('as class:');
                _this.log.debug(classObject);
                var ref = _this.getJsogRef(jsogObject);
                if (ref) {
                    _this.log.debug('Reference to ' + ref + ' found.');
                    return found[ref];
                }
                var result;
                if (classObject) {
                    result = new classObject();
                }
                else {
                    result = {};
                }
                var id = _this.getJsogId(jsogObject);
                if (id) {
                    found[id] = result;
                }
                for (var _i = 0, _a = Object.keys(jsogObject); _i < _a.length; _i++) {
                    var key = _a[_i];
                    if (key === _this.idKey) {
                        continue;
                    }
                    if (Reflect.hasMetadata('JsonProperty', result, key)) {
                        var clazz = Reflect.getMetadata('JsonProperty', result, key);
                        if (!clazz) {
                            clazz = _this.getClass(result, key);
                        }
                        result[key] = deserializeRecursive(jsogObject[key], clazz);
                    }
                    else {
                        result[key] = deserializeRecursive(jsogObject[key]);
                    }
                }
                return result;
            };
            var deserializeArray = function (jsogObject, classObject) {
                var result = [];
                for (var _i = 0, jsogObject_1 = jsogObject; _i < jsogObject_1.length; _i++) {
                    var value = jsogObject_1[_i];
                    // We now this cast is true.
                    result.push(deserializeRecursive(value, classObject));
                }
                return result;
            };
            // Skip deserialization of null.
            if (jsogObject === null) {
                return null;
            }
            // Deserialize Arrays.
            if (_this.isArray(jsogObject)) {
                // We know this cast ist ture.
                jsogObject = jsogObject;
                return deserializeArray(jsogObject, classObject);
            }
            // Deserialize Objets
            if (typeof jsogObject === 'object') {
                // We know this cast ist ture.
                jsogObject = jsogObject;
                return deserializeObject(jsogObject, classObject);
            }
            return jsogObject;
        };
        return deserializeRecursive(jsogObject, classObject);
    };
    return JsogService;
}());
exports.JsogService = JsogService;
