{"ast":null,"code":"import{Role}from'../models/Roles';import{Transport}from'./Transport';const USER_API='/user/api';const companyId='749423b9-1d66-4f93-b1db-ee1526eeb981';const auth={login:(email,password)=>{const userCredentials={username:email,password:password};return Transport.post(`${USER_API}/auth/login`,userCredentials);}};const account={requestPasswordResetLink:email=>{const config={headers:{'Content-Type':'application/json','Target-Url':`https://${window.location.hostname}/passwordresetform/{userId}/{token}`}};return Transport.post(`${USER_API}/account/requestpasswordreset`,{email},undefined,config);},resetPassword:(userId,token,newPassword,confirmPassword)=>{return Transport.post(`${USER_API}/account/resetpassword?userId=${userId}&code=${token}`,{Password:newPassword,ConfirmPassword:confirmPassword});},getUserAgreement:()=>{return Transport.get(`${USER_API}/account/globaluseragreement`);},getTermsAndConditions:()=>{return Transport.get(`${USER_API}/account/useragreement`);},acceptTermsAndConditions:(username,password,userAgreementSignedInitials)=>{const data={username:username,password:password,userAgreementSignedInitials:userAgreementSignedInitials};return Transport.post(`${USER_API}/account/acceptuseragreement`,data);},register:registerModel=>{const config={headers:{'Content-Type':'application/json','Target-Url':`https://${window.location.hostname}/emailConfirmation/{userId}/{token}`}};return Transport.post(`${USER_API}/account/register`,JSON.stringify({...registerModel,companyId}),undefined,config);},verifyEmail:(userId,token)=>{return Transport.post(`${USER_API}/account/confirmemail?userId=${userId}&code=${token}`);},resendEmailConfirmation:email=>{const config={headers:{'Content-Type':'application/json','Target-Url':`https://${window.location.hostname}/emailConfirmation/{userId}/{token}`}};return Transport.post(`${USER_API}/account/resendemailconfirmation`,{email},undefined,config);},registerToken:(registerModel,token)=>{const config={headers:{'Content-Type':'application/json','Target-Url':`https://${window.location.hostname}/emailConfirmation/{userId}/{token}`}};return Transport.post(`${USER_API}/account/register/token/${token}`,JSON.stringify({...registerModel}),undefined,config);}};const userRegistrationToken={validateToken:token=>{return Transport.get(`${USER_API}/userregistrationtoken/${token}/validate`);},sendInvitation:(email,roleId)=>{const data={email:email,roleId:roleId};const config={headers:{'Content-Type':'application/json','Target-Url':`https://${window.location.hostname}/userregistration/{token}`}};return Transport.post(`${USER_API}/userregistrationtoken`,data,undefined,config);}};const users={find:username=>{return Transport.get(`${USER_API}/users/name/${username}`);}};const roles={getExternalAllowedRoles:()=>{return Transport.get(`${USER_API}/roles/externalallowed`,Role);}};const clientCredentials={getToken:(clientKey,clientSecret)=>{return Transport.post(`${USER_API}/clientcredentials/token`,{clientKey,clientSecret});},validateToken:scopes=>{return Transport.post(`${USER_API}/clientcredentials/token/validate`,scopes);}};const companies={getCompany:companyId=>{return Transport.get(`${USER_API}/companies/${companyId}`);}};// eslint-disable-next-line\nexport default{auth,account,users,roles,userRegistrationToken,clientCredentials,companies};","map":{"version":3,"names":["Role","Transport","USER_API","companyId","auth","login","email","password","userCredentials","username","post","account","requestPasswordResetLink","config","headers","window","location","hostname","undefined","resetPassword","userId","token","newPassword","confirmPassword","Password","ConfirmPassword","getUserAgreement","get","getTermsAndConditions","acceptTermsAndConditions","userAgreementSignedInitials","data","register","registerModel","JSON","stringify","verifyEmail","resendEmailConfirmation","registerToken","userRegistrationToken","validateToken","sendInvitation","roleId","users","find","roles","getExternalAllowedRoles","clientCredentials","getToken","clientKey","clientSecret","scopes","companies","getCompany"],"sources":["/Users/feliperodriguez/Desktop/Git Repos/ricocreations/src/api/userApi.ts"],"sourcesContent":["import { AxiosPromise } from 'axios';\nimport { Role } from '../models/Roles';\nimport { User } from '../models/User';\nimport { Transport } from './Transport';\nimport { Company } from '../models/Company';\n\nconst USER_API: string = '/user/api';\n\nconst companyId = '749423b9-1d66-4f93-b1db-ee1526eeb981';\n\nconst auth = {\n    login: (email: string, password: string) => {\n        const userCredentials = {\n            username: email,\n            password: password\n        };\n        return Transport.post(`${USER_API}/auth/login`, userCredentials);\n    }\n};\n\nexport interface RegisterModel {\n    firstName: string;\n    lastName: string;\n    email: string;\n    confirmEmail: string;\n    password: string;\n    confirmPassword: string;\n    userAgreementSignedInitials: string;\n}\n\nexport interface UserRegistrationWithTokenModel {\n    firstName: string;\n    lastName: string;\n    password: string;\n    confirmPassword: string;\n    userAgreementSignedInitials: string;\n}\n\nconst account = {\n    requestPasswordResetLink: (email: string) => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Target-Url': `https://${window.location.hostname}/passwordresetform/{userId}/{token}`\n            }\n        };\n        return Transport.post(`${USER_API}/account/requestpasswordreset`, { email }, undefined, config);\n    },\n    resetPassword: (userId: string, token: string, newPassword: string, confirmPassword: string) => {\n        return Transport.post(`${USER_API}/account/resetpassword?userId=${userId}&code=${token}`, {\n            Password: newPassword,\n            ConfirmPassword: confirmPassword\n        });\n    },\n    getUserAgreement: () => {\n        return Transport.get(`${USER_API}/account/globaluseragreement`);\n    },\n    getTermsAndConditions: (): AxiosPromise<string> => {\n        return Transport.get(`${USER_API}/account/useragreement`);\n    },\n    acceptTermsAndConditions: (username: string, password: string, userAgreementSignedInitials: string) => {\n        const data = {\n            username: username,\n            password: password,\n            userAgreementSignedInitials: userAgreementSignedInitials\n        };\n\n        return Transport.post(`${USER_API}/account/acceptuseragreement`, data);\n    },\n    register: (registerModel: RegisterModel) => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Target-Url': `https://${window.location.hostname}/emailConfirmation/{userId}/{token}`\n            }\n        };\n        return Transport.post(\n            `${USER_API}/account/register`,\n            JSON.stringify({ ...registerModel, companyId }),\n            undefined,\n            config\n        );\n    },\n    verifyEmail: (userId: string, token: string) => {\n        return Transport.post(`${USER_API}/account/confirmemail?userId=${userId}&code=${token}`);\n    },\n    resendEmailConfirmation: (email: string) => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Target-Url': `https://${window.location.hostname}/emailConfirmation/{userId}/{token}`\n            }\n        };\n        return Transport.post(`${USER_API}/account/resendemailconfirmation`, { email }, undefined, config);\n    },\n\n    registerToken: (registerModel: UserRegistrationWithTokenModel, token: string) => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Target-Url': `https://${window.location.hostname}/emailConfirmation/{userId}/{token}`\n            }\n        };\n        return Transport.post(\n            `${USER_API}/account/register/token/${token}`,\n            JSON.stringify({ ...registerModel }),\n            undefined,\n            config\n        );\n    }\n};\n\nconst userRegistrationToken = {\n    validateToken: (token: string): AxiosPromise => {\n        return Transport.get(`${USER_API}/userregistrationtoken/${token}/validate`);\n    },\n    sendInvitation: (email: string, roleId: string): AxiosPromise<string> => {\n        const data = {\n            email: email,\n            roleId: roleId\n        };\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Target-Url': `https://${window.location.hostname}/userregistration/{token}`\n            }\n        };\n        return Transport.post(`${USER_API}/userregistrationtoken`, data, undefined, config);\n    }\n};\n\nconst users = {\n    find: (username: string): AxiosPromise<User> => {\n        return Transport.get(`${USER_API}/users/name/${username}`);\n    }\n};\n\nconst roles = {\n    getExternalAllowedRoles: (): AxiosPromise<Role[]> => {\n        return Transport.get(`${USER_API}/roles/externalallowed`, Role);\n    }\n};\n\nconst clientCredentials = {\n    getToken: (clientKey: string, clientSecret: string): AxiosPromise<string> => {\n        return Transport.post(`${USER_API}/clientcredentials/token`, { clientKey, clientSecret });\n    },\n    validateToken: (scopes: string[]): AxiosPromise => {\n        return Transport.post(`${USER_API}/clientcredentials/token/validate`, scopes);\n    }\n};\n\nconst companies = {\n    getCompany: (companyId: string): AxiosPromise<Company> => {\n        return Transport.get(`${USER_API}/companies/${companyId}`);\n    }\n};\n\n// eslint-disable-next-line\nexport default {\n    auth,\n    account,\n    users,\n    roles,\n    userRegistrationToken,\n    clientCredentials,\n    companies\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}