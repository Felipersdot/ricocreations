{"ast":null,"code":"import React,{useState,useCallback}from'react';import{NotificationContext}from'../../contexts/NotificationContext';import NotificationContainer from'./NotificationContainer';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";let id=1;const NotificationProvider=_ref=>{let{children}=_ref;const[notifications,setNotifications]=useState([]);const addNotification=useCallback((content,type)=>{setNotifications(notifications=>[...notifications,{id:id++,type,content}]);},[setNotifications]);const removeNotification=useCallback(id=>{setNotifications(notifications=>notifications.filter(t=>t.id!==id));},[setNotifications]);return/*#__PURE__*/_jsxs(NotificationContext.Provider,{value:{addNotification,removeNotification},children:[/*#__PURE__*/_jsx(NotificationContainer,{notifications:notifications}),children]});};export default NotificationProvider;","map":{"version":3,"names":["React","useState","useCallback","NotificationContext","NotificationContainer","jsx","_jsx","jsxs","_jsxs","id","NotificationProvider","_ref","children","notifications","setNotifications","addNotification","content","type","removeNotification","filter","t","Provider","value"],"sources":["/Users/feliperodriguez/Desktop/Git Repos/ricocreations/src/components/Notification/NotificationProvider.tsx"],"sourcesContent":["import React, { useState, useCallback, ReactNode } from 'react';\nimport { NotificationContext } from '../../contexts/NotificationContext';\nimport NotificationContainer from './NotificationContainer';\n\nexport interface NotificationModel {\n    id: number;\n    type: 'success' | 'error';\n    content: string | ReactNode;\n}\n\nlet id = 1;\n\nconst NotificationProvider: React.FC = ({ children }) => {\n    const [notifications, setNotifications] = useState<NotificationModel[]>([]);\n\n    const addNotification = useCallback(\n        (content, type) => {\n            setNotifications((notifications) => [\n                ...notifications,\n                {\n                    id: id++,\n                    type,\n                    content\n                }\n            ]);\n        },\n        [setNotifications]\n    );\n\n    const removeNotification = useCallback(\n        (id: number) => {\n            setNotifications((notifications) => notifications.filter((t) => t.id !== id));\n        },\n        [setNotifications]\n    );\n\n    return (\n        <NotificationContext.Provider value={{ addNotification, removeNotification }}>\n            <NotificationContainer notifications={notifications} />\n            {children}\n        </NotificationContext.Provider>\n    );\n};\n\nexport default NotificationProvider;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,WAAW,KAAmB,OAAO,CAC/D,OAASC,mBAAmB,KAAQ,oCAAoC,CACxE,MAAO,CAAAC,qBAAqB,KAAM,yBAAyB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAQ5D,GAAI,CAAAC,EAAE,CAAG,CAAC,CAEV,KAAM,CAAAC,oBAA8B,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAChD,KAAM,CAACE,aAAa,CAAEC,gBAAgB,CAAC,CAAGb,QAAQ,CAAsB,EAAE,CAAC,CAE3E,KAAM,CAAAc,eAAe,CAAGb,WAAW,CAC/B,CAACc,OAAO,CAAEC,IAAI,GAAK,CACfH,gBAAgB,CAAED,aAAa,EAAK,CAChC,GAAGA,aAAa,CAChB,CACIJ,EAAE,CAAEA,EAAE,EAAE,CACRQ,IAAI,CACJD,OACJ,CAAC,CACJ,CAAC,CACN,CAAC,CACD,CAACF,gBAAgB,CACrB,CAAC,CAED,KAAM,CAAAI,kBAAkB,CAAGhB,WAAW,CACjCO,EAAU,EAAK,CACZK,gBAAgB,CAAED,aAAa,EAAKA,aAAa,CAACM,MAAM,CAAEC,CAAC,EAAKA,CAAC,CAACX,EAAE,GAAKA,EAAE,CAAC,CAAC,CACjF,CAAC,CACD,CAACK,gBAAgB,CACrB,CAAC,CAED,mBACIN,KAAA,CAACL,mBAAmB,CAACkB,QAAQ,EAACC,KAAK,CAAE,CAAEP,eAAe,CAAEG,kBAAmB,CAAE,CAAAN,QAAA,eACzEN,IAAA,CAACF,qBAAqB,EAACS,aAAa,CAAEA,aAAc,CAAE,CAAC,CACtDD,QAAQ,EACiB,CAAC,CAEvC,CAAC,CAED,cAAe,CAAAF,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}