{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// Support\nrequire(\"reflect-metadata\");\n// Logger\nvar Logger_1 = require(\"../log/Logger\");\n/**\n * JavaScript Object Graph Service.\n *\n * Instances of this class can be used to serialize and deserialize Objects\n * Graphs to and from Json.\n */\nvar JsogService = function () {\n  function JsogService() {\n    // ------------------------------------------------------------------------\n    // Private fields\n    // ------------------------------------------------------------------------\n    this.log = Logger_1.Logger.getInstance();\n    // ------------------------------------------------------------------------\n    // Public fields\n    // ------------------------------------------------------------------------\n    /**\n     * Property Key for JavaScript Object Graph References.\n     */\n    this.refKey = '@ref';\n    /**\n     * Property key where JavaScript Object Graph Identifieres.\n     */\n    this.idKey = '@id';\n    /**\n     * Temporary added property key to store JavaScript Object Graph\n     * Identifiers while serializing.\n     */\n    this.identifiedObjectKey = '__jsogObjectId';\n  }\n  Object.defineProperty(JsogService.prototype, \"debugEnabled\", {\n    get: function get() {\n      return this.log.debugEnabled;\n    },\n    /**\n     * Flag to enable debug output.\n     */\n    set: function set(debugEnabled) {\n      this.log.debugEnabled = debugEnabled;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Test if object has a custom Jsonification function.\n   *\n   * @param object to test.\n   */\n  JsogService.prototype.hasCustomJsonificaiton = function (object) {\n    return typeof object.toJSON === 'function';\n  };\n  /**\n   * Test if the object is an Array.\n   *\n   * @param object to test.\n   */\n  JsogService.prototype.isArray = function (object) {\n    return Object.prototype.toString.call(object) === '[object Array]';\n  };\n  /**\n   * Removes all elements from an Array.\n   *\n   * @param array to clear\n   */\n  JsogService.prototype.clearArray = function (array) {\n    array.length = 0;\n  };\n  /**\n   * Get the defined Class of an object.\n   *\n   * The Property needs to be annotated.\n   *\n   * @param target Object to find Class of propertyKey for.\n   * @param propertyKey Property name to find Class for.\n   */\n  JsogService.prototype.getClass = function (target, propertyKey) {\n    return Reflect.getMetadata('design:type', target, propertyKey);\n  };\n  /**\n   * Get the JavaScript Object Graph Identifiere of object.\n   */\n  JsogService.prototype.getJsogId = function (object) {\n    var id = object[this.idKey];\n    // be defensive if someone uses numbers in violation of the spec\n    if (id) {\n      id = id.toString();\n    }\n    return id;\n  };\n  /**\n   * Get the JavaScript Object Reference of object.\n   */\n  // TODO: Find a better way to type JsogReference.\n  JsogService.prototype.getJsogRef = function (object) {\n    var ref = object[this.refKey];\n    // Be defensive if someone uses numbers in violation of the spec\n    if (ref) {\n      ref = ref.toString();\n    }\n    return ref;\n  };\n  /**\n   * Serialize an Object to a JavaScript Object Graph.\n   *\n   * If an Object in the Graph has a custom toJSON function this is used for serialization.\n   *\n   * @param object to serialize.\n   */\n  JsogService.prototype.serialize = function (object) {\n    var _this = this;\n    this.log.debug('serialize:');\n    this.log.debug(object);\n    /**\n     * Reset nextId to one.\n     */\n    var nextId = 1;\n    // Serialized objects by id.\n    var serializedById = [];\n    // Holds references to all touched objects.\n    var allOriginal = [];\n    /**\n     * Get the JSOG id of one object. Set the id if neccesarry.\n     *\n     * @param obj Object in object graph.\n     */\n    var getIdOf = function getIdOf(obj) {\n      if (!obj.__jsogObjectId) {\n        obj.__jsogObjectId = nextId++;\n        allOriginal.push(obj);\n      }\n      return obj.__jsogObjectId;\n    };\n    /**\n     * Recursive Serialization function.\n     *\n     * @param original Any object.\n     */\n    var _serializeRecursive = function serializeRecursive(original) {\n      /**\n       * Serialize an Object.\n       *\n       * @param original An Object to Serialize.\n       */\n      var serializeObject = function serializeObject(original) {\n        var result = {};\n        var id = getIdOf(original);\n        // If this object was already serialized\n        // we return an JsogReference.\n        if (serializedById[id]) {\n          result[_this.refKey] = id.toString();\n          return result;\n        }\n        // ... and hold a reference locally to find it later.\n        serializedById[id] = result;\n        // Serialize the object...\n        for (var _i = 0, _a = Object.keys(original); _i < _a.length; _i++) {\n          var key = _a[_i];\n          if (key !== _this.identifiedObjectKey) {\n            result[key] = _serializeRecursive(original[key]);\n          }\n        }\n        // ... add the JSOG key ...\n        result[_this.idKey] = id.toString();\n        return result;\n      };\n      /**\n       * Serialize every element of an array.\n       *\n       * @param array to serialize\n       */\n      var serializeArray = function serializeArray(array) {\n        var allEncoded = [];\n        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n          var entry = array_1[_i];\n          allEncoded.push(_serializeRecursive(entry));\n        }\n        return allEncoded;\n      };\n      if (!original) {\n        return original;\n      } else if (_this.hasCustomJsonificaiton(original)) {\n        return original;\n      } else if (_this.isArray(original)) {\n        return serializeArray(original);\n      } else if (typeof original === 'object') {\n        return serializeObject(original);\n      } else {\n        return original;\n      }\n    };\n    // Call recursive serialization.\n    var result = _serializeRecursive(object);\n    // Remove temporary object identifieres.\n    allOriginal.forEach(function (element) {\n      delete element.__jsogObjectId;\n    });\n    this.clearArray(serializedById);\n    return result;\n  };\n  /**\n   * Deserialize an JavaScript Object Graph Array.\n   *\n   * @param jsogObject Array of JsogObjects.\n   * @param clazz Class to instantiant the array entries with.\n   */\n  JsogService.prototype.deserializeArray = function (jsogObject, clazz) {\n    return this.deserialize(jsogObject, clazz);\n  };\n  /**\n   * Deserialize an JavaScript Object Graph.\n   *\n   * @param jsogObject JavaScript Object Graph root.\n   * @param clazz Class to intantiate the root with.\n   */\n  JsogService.prototype.deserializeObject = function (jsogObject, clazz) {\n    return this.deserialize(jsogObject, clazz);\n  };\n  JsogService.prototype.deserialize = function (jsogObject, classObject) {\n    var _this = this;\n    this.log.debug('deserialize:');\n    this.log.debug(jsogObject);\n    this.log.debug('as class:');\n    this.log.debug(classObject);\n    // Map of found objects by identifier.\n    var found = {};\n    var _deserializeRecursive = function deserializeRecursive(jsogObject, classObject) {\n      _this.log.debug('deserializeRecursive:');\n      _this.log.debug(jsogObject);\n      _this.log.debug('as class:');\n      _this.log.debug(classObject);\n      var deserializeObject = function deserializeObject(jsogObject, classObject) {\n        _this.log.debug('deserializeObject:');\n        _this.log.debug(jsogObject);\n        _this.log.debug('as class:');\n        _this.log.debug(classObject);\n        var ref = _this.getJsogRef(jsogObject);\n        if (ref) {\n          _this.log.debug('Reference to ' + ref + ' found.');\n          return found[ref];\n        }\n        var result;\n        if (classObject) {\n          result = new classObject();\n        } else {\n          result = {};\n        }\n        var id = _this.getJsogId(jsogObject);\n        if (id) {\n          found[id] = result;\n        }\n        for (var _i = 0, _a = Object.keys(jsogObject); _i < _a.length; _i++) {\n          var key = _a[_i];\n          if (key === _this.idKey) {\n            continue;\n          }\n          if (Reflect.hasMetadata('JsonProperty', result, key)) {\n            var clazz = Reflect.getMetadata('JsonProperty', result, key);\n            if (!clazz) {\n              clazz = _this.getClass(result, key);\n            }\n            result[key] = _deserializeRecursive(jsogObject[key], clazz);\n          } else {\n            result[key] = _deserializeRecursive(jsogObject[key]);\n          }\n        }\n        return result;\n      };\n      var deserializeArray = function deserializeArray(jsogObject, classObject) {\n        var result = [];\n        for (var _i = 0, jsogObject_1 = jsogObject; _i < jsogObject_1.length; _i++) {\n          var value = jsogObject_1[_i];\n          // We now this cast is true.\n          result.push(_deserializeRecursive(value, classObject));\n        }\n        return result;\n      };\n      // Skip deserialization of null.\n      if (jsogObject === null) {\n        return null;\n      }\n      // Deserialize Arrays.\n      if (_this.isArray(jsogObject)) {\n        // We know this cast ist ture.\n        jsogObject = jsogObject;\n        return deserializeArray(jsogObject, classObject);\n      }\n      // Deserialize Objets\n      if (typeof jsogObject === 'object') {\n        // We know this cast ist ture.\n        jsogObject = jsogObject;\n        return deserializeObject(jsogObject, classObject);\n      }\n      return jsogObject;\n    };\n    return _deserializeRecursive(jsogObject, classObject);\n  };\n  return JsogService;\n}();\nexports.JsogService = JsogService;","map":{"version":3,"names":["Object","defineProperty","exports","value","require","Logger_1","JsogService","log","Logger","getInstance","refKey","idKey","identifiedObjectKey","prototype","get","debugEnabled","set","enumerable","configurable","hasCustomJsonificaiton","object","toJSON","isArray","toString","call","clearArray","array","length","getClass","target","propertyKey","Reflect","getMetadata","getJsogId","id","getJsogRef","ref","serialize","_this","debug","nextId","serializedById","allOriginal","getIdOf","obj","__jsogObjectId","push","serializeRecursive","original","serializeObject","result","_i","_a","keys","key","serializeArray","allEncoded","array_1","entry","forEach","element","deserializeArray","jsogObject","clazz","deserialize","deserializeObject","classObject","found","deserializeRecursive","hasMetadata","jsogObject_1"],"sources":["/Users/feliperodriguez/Desktop/Git Repos/ricocreations/node_modules/jsog-typescript/dist/module/Jsog.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Support\nrequire(\"reflect-metadata\");\n// Logger\nvar Logger_1 = require(\"../log/Logger\");\n/**\n * JavaScript Object Graph Service.\n *\n * Instances of this class can be used to serialize and deserialize Objects\n * Graphs to and from Json.\n */\nvar JsogService = (function () {\n    function JsogService() {\n        // ------------------------------------------------------------------------\n        // Private fields\n        // ------------------------------------------------------------------------\n        this.log = Logger_1.Logger.getInstance();\n        // ------------------------------------------------------------------------\n        // Public fields\n        // ------------------------------------------------------------------------\n        /**\n         * Property Key for JavaScript Object Graph References.\n         */\n        this.refKey = '@ref';\n        /**\n         * Property key where JavaScript Object Graph Identifieres.\n         */\n        this.idKey = '@id';\n        /**\n         * Temporary added property key to store JavaScript Object Graph\n         * Identifiers while serializing.\n         */\n        this.identifiedObjectKey = '__jsogObjectId';\n    }\n    Object.defineProperty(JsogService.prototype, \"debugEnabled\", {\n        get: function () {\n            return this.log.debugEnabled;\n        },\n        /**\n         * Flag to enable debug output.\n         */\n        set: function (debugEnabled) {\n            this.log.debugEnabled = debugEnabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Test if object has a custom Jsonification function.\n     *\n     * @param object to test.\n     */\n    JsogService.prototype.hasCustomJsonificaiton = function (object) {\n        return typeof object.toJSON === 'function';\n    };\n    /**\n     * Test if the object is an Array.\n     *\n     * @param object to test.\n     */\n    JsogService.prototype.isArray = function (object) {\n        return Object.prototype.toString.call(object) === '[object Array]';\n    };\n    /**\n     * Removes all elements from an Array.\n     *\n     * @param array to clear\n     */\n    JsogService.prototype.clearArray = function (array) {\n        array.length = 0;\n    };\n    /**\n     * Get the defined Class of an object.\n     *\n     * The Property needs to be annotated.\n     *\n     * @param target Object to find Class of propertyKey for.\n     * @param propertyKey Property name to find Class for.\n     */\n    JsogService.prototype.getClass = function (target, propertyKey) {\n        return Reflect.getMetadata('design:type', target, propertyKey);\n    };\n    /**\n     * Get the JavaScript Object Graph Identifiere of object.\n     */\n    JsogService.prototype.getJsogId = function (object) {\n        var id = object[this.idKey];\n        // be defensive if someone uses numbers in violation of the spec\n        if (id) {\n            id = id.toString();\n        }\n        return id;\n    };\n    /**\n     * Get the JavaScript Object Reference of object.\n     */\n    // TODO: Find a better way to type JsogReference.\n    JsogService.prototype.getJsogRef = function (object) {\n        var ref = object[this.refKey];\n        // Be defensive if someone uses numbers in violation of the spec\n        if (ref) {\n            ref = ref.toString();\n        }\n        return ref;\n    };\n    /**\n     * Serialize an Object to a JavaScript Object Graph.\n     *\n     * If an Object in the Graph has a custom toJSON function this is used for serialization.\n     *\n     * @param object to serialize.\n     */\n    JsogService.prototype.serialize = function (object) {\n        var _this = this;\n        this.log.debug('serialize:');\n        this.log.debug(object);\n        /**\n         * Reset nextId to one.\n         */\n        var nextId = 1;\n        // Serialized objects by id.\n        var serializedById = [];\n        // Holds references to all touched objects.\n        var allOriginal = [];\n        /**\n         * Get the JSOG id of one object. Set the id if neccesarry.\n         *\n         * @param obj Object in object graph.\n         */\n        var getIdOf = function (obj) {\n            if (!obj.__jsogObjectId) {\n                obj.__jsogObjectId = nextId++;\n                allOriginal.push(obj);\n            }\n            return obj.__jsogObjectId;\n        };\n        /**\n         * Recursive Serialization function.\n         *\n         * @param original Any object.\n         */\n        var serializeRecursive = function (original) {\n            /**\n             * Serialize an Object.\n             *\n             * @param original An Object to Serialize.\n             */\n            var serializeObject = function (original) {\n                var result = {};\n                var id = getIdOf(original);\n                // If this object was already serialized\n                // we return an JsogReference.\n                if (serializedById[id]) {\n                    result[_this.refKey] = id.toString();\n                    return result;\n                }\n                // ... and hold a reference locally to find it later.\n                serializedById[id] = result;\n                // Serialize the object...\n                for (var _i = 0, _a = Object.keys(original); _i < _a.length; _i++) {\n                    var key = _a[_i];\n                    if (key !== _this.identifiedObjectKey) {\n                        result[key] = serializeRecursive(original[key]);\n                    }\n                }\n                // ... add the JSOG key ...\n                result[_this.idKey] = id.toString();\n                return result;\n            };\n            /**\n             * Serialize every element of an array.\n             *\n             * @param array to serialize\n             */\n            var serializeArray = function (array) {\n                var allEncoded = [];\n                for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n                    var entry = array_1[_i];\n                    allEncoded.push(serializeRecursive(entry));\n                }\n                return allEncoded;\n            };\n            if (!original) {\n                return original;\n            }\n            else if (_this.hasCustomJsonificaiton(original)) {\n                return original;\n            }\n            else if (_this.isArray(original)) {\n                return serializeArray(original);\n            }\n            else if (typeof original === 'object') {\n                return serializeObject(original);\n            }\n            else {\n                return original;\n            }\n        };\n        // Call recursive serialization.\n        var result = serializeRecursive(object);\n        // Remove temporary object identifieres.\n        allOriginal.forEach(function (element) {\n            delete element.__jsogObjectId;\n        });\n        this.clearArray(serializedById);\n        return result;\n    };\n    /**\n     * Deserialize an JavaScript Object Graph Array.\n     *\n     * @param jsogObject Array of JsogObjects.\n     * @param clazz Class to instantiant the array entries with.\n     */\n    JsogService.prototype.deserializeArray = function (jsogObject, clazz) {\n        return this.deserialize(jsogObject, clazz);\n    };\n    /**\n     * Deserialize an JavaScript Object Graph.\n     *\n     * @param jsogObject JavaScript Object Graph root.\n     * @param clazz Class to intantiate the root with.\n     */\n    JsogService.prototype.deserializeObject = function (jsogObject, clazz) {\n        return this.deserialize(jsogObject, clazz);\n    };\n    JsogService.prototype.deserialize = function (jsogObject, classObject) {\n        var _this = this;\n        this.log.debug('deserialize:');\n        this.log.debug(jsogObject);\n        this.log.debug('as class:');\n        this.log.debug(classObject);\n        // Map of found objects by identifier.\n        var found = {};\n        var deserializeRecursive = function (jsogObject, classObject) {\n            _this.log.debug('deserializeRecursive:');\n            _this.log.debug(jsogObject);\n            _this.log.debug('as class:');\n            _this.log.debug(classObject);\n            var deserializeObject = function (jsogObject, classObject) {\n                _this.log.debug('deserializeObject:');\n                _this.log.debug(jsogObject);\n                _this.log.debug('as class:');\n                _this.log.debug(classObject);\n                var ref = _this.getJsogRef(jsogObject);\n                if (ref) {\n                    _this.log.debug('Reference to ' + ref + ' found.');\n                    return found[ref];\n                }\n                var result;\n                if (classObject) {\n                    result = new classObject();\n                }\n                else {\n                    result = {};\n                }\n                var id = _this.getJsogId(jsogObject);\n                if (id) {\n                    found[id] = result;\n                }\n                for (var _i = 0, _a = Object.keys(jsogObject); _i < _a.length; _i++) {\n                    var key = _a[_i];\n                    if (key === _this.idKey) {\n                        continue;\n                    }\n                    if (Reflect.hasMetadata('JsonProperty', result, key)) {\n                        var clazz = Reflect.getMetadata('JsonProperty', result, key);\n                        if (!clazz) {\n                            clazz = _this.getClass(result, key);\n                        }\n                        result[key] = deserializeRecursive(jsogObject[key], clazz);\n                    }\n                    else {\n                        result[key] = deserializeRecursive(jsogObject[key]);\n                    }\n                }\n                return result;\n            };\n            var deserializeArray = function (jsogObject, classObject) {\n                var result = [];\n                for (var _i = 0, jsogObject_1 = jsogObject; _i < jsogObject_1.length; _i++) {\n                    var value = jsogObject_1[_i];\n                    // We now this cast is true.\n                    result.push(deserializeRecursive(value, classObject));\n                }\n                return result;\n            };\n            // Skip deserialization of null.\n            if (jsogObject === null) {\n                return null;\n            }\n            // Deserialize Arrays.\n            if (_this.isArray(jsogObject)) {\n                // We know this cast ist ture.\n                jsogObject = jsogObject;\n                return deserializeArray(jsogObject, classObject);\n            }\n            // Deserialize Objets\n            if (typeof jsogObject === 'object') {\n                // We know this cast ist ture.\n                jsogObject = jsogObject;\n                return deserializeObject(jsogObject, classObject);\n            }\n            return jsogObject;\n        };\n        return deserializeRecursive(jsogObject, classObject);\n    };\n    return JsogService;\n}());\nexports.JsogService = JsogService;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D;AACAC,OAAO,CAAC,kBAAkB,CAAC;AAC3B;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,eAAe,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,IAAIE,WAAW,GAAI,YAAY;EAC3B,SAASA,WAAWA,CAAA,EAAG;IACnB;IACA;IACA;IACA,IAAI,CAACC,GAAG,GAAGF,QAAQ,CAACG,MAAM,CAACC,WAAW,CAAC,CAAC;IACxC;IACA;IACA;IACA;AACR;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,MAAM;IACpB;AACR;AACA;IACQ,IAAI,CAACC,KAAK,GAAG,KAAK;IAClB;AACR;AACA;AACA;IACQ,IAAI,CAACC,mBAAmB,GAAG,gBAAgB;EAC/C;EACAZ,MAAM,CAACC,cAAc,CAACK,WAAW,CAACO,SAAS,EAAE,cAAc,EAAE;IACzDC,GAAG,EAAE,SAALA,GAAGA,CAAA,EAAc;MACb,OAAO,IAAI,CAACP,GAAG,CAACQ,YAAY;IAChC,CAAC;IACD;AACR;AACA;IACQC,GAAG,EAAE,SAALA,GAAGA,CAAYD,YAAY,EAAE;MACzB,IAAI,CAACR,GAAG,CAACQ,YAAY,GAAGA,YAAY;IACxC,CAAC;IACDE,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;EACIZ,WAAW,CAACO,SAAS,CAACM,sBAAsB,GAAG,UAAUC,MAAM,EAAE;IAC7D,OAAO,OAAOA,MAAM,CAACC,MAAM,KAAK,UAAU;EAC9C,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIf,WAAW,CAACO,SAAS,CAACS,OAAO,GAAG,UAAUF,MAAM,EAAE;IAC9C,OAAOpB,MAAM,CAACa,SAAS,CAACU,QAAQ,CAACC,IAAI,CAACJ,MAAM,CAAC,KAAK,gBAAgB;EACtE,CAAC;EACD;AACJ;AACA;AACA;AACA;EACId,WAAW,CAACO,SAAS,CAACY,UAAU,GAAG,UAAUC,KAAK,EAAE;IAChDA,KAAK,CAACC,MAAM,GAAG,CAAC;EACpB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIrB,WAAW,CAACO,SAAS,CAACe,QAAQ,GAAG,UAAUC,MAAM,EAAEC,WAAW,EAAE;IAC5D,OAAOC,OAAO,CAACC,WAAW,CAAC,aAAa,EAAEH,MAAM,EAAEC,WAAW,CAAC;EAClE,CAAC;EACD;AACJ;AACA;EACIxB,WAAW,CAACO,SAAS,CAACoB,SAAS,GAAG,UAAUb,MAAM,EAAE;IAChD,IAAIc,EAAE,GAAGd,MAAM,CAAC,IAAI,CAACT,KAAK,CAAC;IAC3B;IACA,IAAIuB,EAAE,EAAE;MACJA,EAAE,GAAGA,EAAE,CAACX,QAAQ,CAAC,CAAC;IACtB;IACA,OAAOW,EAAE;EACb,CAAC;EACD;AACJ;AACA;EACI;EACA5B,WAAW,CAACO,SAAS,CAACsB,UAAU,GAAG,UAAUf,MAAM,EAAE;IACjD,IAAIgB,GAAG,GAAGhB,MAAM,CAAC,IAAI,CAACV,MAAM,CAAC;IAC7B;IACA,IAAI0B,GAAG,EAAE;MACLA,GAAG,GAAGA,GAAG,CAACb,QAAQ,CAAC,CAAC;IACxB;IACA,OAAOa,GAAG;EACd,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACI9B,WAAW,CAACO,SAAS,CAACwB,SAAS,GAAG,UAAUjB,MAAM,EAAE;IAChD,IAAIkB,KAAK,GAAG,IAAI;IAChB,IAAI,CAAC/B,GAAG,CAACgC,KAAK,CAAC,YAAY,CAAC;IAC5B,IAAI,CAAChC,GAAG,CAACgC,KAAK,CAACnB,MAAM,CAAC;IACtB;AACR;AACA;IACQ,IAAIoB,MAAM,GAAG,CAAC;IACd;IACA,IAAIC,cAAc,GAAG,EAAE;IACvB;IACA,IAAIC,WAAW,GAAG,EAAE;IACpB;AACR;AACA;AACA;AACA;IACQ,IAAIC,OAAO,GAAG,SAAVA,OAAOA,CAAaC,GAAG,EAAE;MACzB,IAAI,CAACA,GAAG,CAACC,cAAc,EAAE;QACrBD,GAAG,CAACC,cAAc,GAAGL,MAAM,EAAE;QAC7BE,WAAW,CAACI,IAAI,CAACF,GAAG,CAAC;MACzB;MACA,OAAOA,GAAG,CAACC,cAAc;IAC7B,CAAC;IACD;AACR;AACA;AACA;AACA;IACQ,IAAIE,mBAAkB,GAAG,SAArBA,kBAAkBA,CAAaC,QAAQ,EAAE;MACzC;AACZ;AACA;AACA;AACA;MACY,IAAIC,eAAe,GAAG,SAAlBA,eAAeA,CAAaD,QAAQ,EAAE;QACtC,IAAIE,MAAM,GAAG,CAAC,CAAC;QACf,IAAIhB,EAAE,GAAGS,OAAO,CAACK,QAAQ,CAAC;QAC1B;QACA;QACA,IAAIP,cAAc,CAACP,EAAE,CAAC,EAAE;UACpBgB,MAAM,CAACZ,KAAK,CAAC5B,MAAM,CAAC,GAAGwB,EAAE,CAACX,QAAQ,CAAC,CAAC;UACpC,OAAO2B,MAAM;QACjB;QACA;QACAT,cAAc,CAACP,EAAE,CAAC,GAAGgB,MAAM;QAC3B;QACA,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAGpD,MAAM,CAACqD,IAAI,CAACL,QAAQ,CAAC,EAAEG,EAAE,GAAGC,EAAE,CAACzB,MAAM,EAAEwB,EAAE,EAAE,EAAE;UAC/D,IAAIG,GAAG,GAAGF,EAAE,CAACD,EAAE,CAAC;UAChB,IAAIG,GAAG,KAAKhB,KAAK,CAAC1B,mBAAmB,EAAE;YACnCsC,MAAM,CAACI,GAAG,CAAC,GAAGP,mBAAkB,CAACC,QAAQ,CAACM,GAAG,CAAC,CAAC;UACnD;QACJ;QACA;QACAJ,MAAM,CAACZ,KAAK,CAAC3B,KAAK,CAAC,GAAGuB,EAAE,CAACX,QAAQ,CAAC,CAAC;QACnC,OAAO2B,MAAM;MACjB,CAAC;MACD;AACZ;AACA;AACA;AACA;MACY,IAAIK,cAAc,GAAG,SAAjBA,cAAcA,CAAa7B,KAAK,EAAE;QAClC,IAAI8B,UAAU,GAAG,EAAE;QACnB,KAAK,IAAIL,EAAE,GAAG,CAAC,EAAEM,OAAO,GAAG/B,KAAK,EAAEyB,EAAE,GAAGM,OAAO,CAAC9B,MAAM,EAAEwB,EAAE,EAAE,EAAE;UACzD,IAAIO,KAAK,GAAGD,OAAO,CAACN,EAAE,CAAC;UACvBK,UAAU,CAACV,IAAI,CAACC,mBAAkB,CAACW,KAAK,CAAC,CAAC;QAC9C;QACA,OAAOF,UAAU;MACrB,CAAC;MACD,IAAI,CAACR,QAAQ,EAAE;QACX,OAAOA,QAAQ;MACnB,CAAC,MACI,IAAIV,KAAK,CAACnB,sBAAsB,CAAC6B,QAAQ,CAAC,EAAE;QAC7C,OAAOA,QAAQ;MACnB,CAAC,MACI,IAAIV,KAAK,CAAChB,OAAO,CAAC0B,QAAQ,CAAC,EAAE;QAC9B,OAAOO,cAAc,CAACP,QAAQ,CAAC;MACnC,CAAC,MACI,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;QACnC,OAAOC,eAAe,CAACD,QAAQ,CAAC;MACpC,CAAC,MACI;QACD,OAAOA,QAAQ;MACnB;IACJ,CAAC;IACD;IACA,IAAIE,MAAM,GAAGH,mBAAkB,CAAC3B,MAAM,CAAC;IACvC;IACAsB,WAAW,CAACiB,OAAO,CAAC,UAAUC,OAAO,EAAE;MACnC,OAAOA,OAAO,CAACf,cAAc;IACjC,CAAC,CAAC;IACF,IAAI,CAACpB,UAAU,CAACgB,cAAc,CAAC;IAC/B,OAAOS,MAAM;EACjB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACI5C,WAAW,CAACO,SAAS,CAACgD,gBAAgB,GAAG,UAAUC,UAAU,EAAEC,KAAK,EAAE;IAClE,OAAO,IAAI,CAACC,WAAW,CAACF,UAAU,EAAEC,KAAK,CAAC;EAC9C,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIzD,WAAW,CAACO,SAAS,CAACoD,iBAAiB,GAAG,UAAUH,UAAU,EAAEC,KAAK,EAAE;IACnE,OAAO,IAAI,CAACC,WAAW,CAACF,UAAU,EAAEC,KAAK,CAAC;EAC9C,CAAC;EACDzD,WAAW,CAACO,SAAS,CAACmD,WAAW,GAAG,UAAUF,UAAU,EAAEI,WAAW,EAAE;IACnE,IAAI5B,KAAK,GAAG,IAAI;IAChB,IAAI,CAAC/B,GAAG,CAACgC,KAAK,CAAC,cAAc,CAAC;IAC9B,IAAI,CAAChC,GAAG,CAACgC,KAAK,CAACuB,UAAU,CAAC;IAC1B,IAAI,CAACvD,GAAG,CAACgC,KAAK,CAAC,WAAW,CAAC;IAC3B,IAAI,CAAChC,GAAG,CAACgC,KAAK,CAAC2B,WAAW,CAAC;IAC3B;IACA,IAAIC,KAAK,GAAG,CAAC,CAAC;IACd,IAAIC,qBAAoB,GAAG,SAAvBA,oBAAoBA,CAAaN,UAAU,EAAEI,WAAW,EAAE;MAC1D5B,KAAK,CAAC/B,GAAG,CAACgC,KAAK,CAAC,uBAAuB,CAAC;MACxCD,KAAK,CAAC/B,GAAG,CAACgC,KAAK,CAACuB,UAAU,CAAC;MAC3BxB,KAAK,CAAC/B,GAAG,CAACgC,KAAK,CAAC,WAAW,CAAC;MAC5BD,KAAK,CAAC/B,GAAG,CAACgC,KAAK,CAAC2B,WAAW,CAAC;MAC5B,IAAID,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAaH,UAAU,EAAEI,WAAW,EAAE;QACvD5B,KAAK,CAAC/B,GAAG,CAACgC,KAAK,CAAC,oBAAoB,CAAC;QACrCD,KAAK,CAAC/B,GAAG,CAACgC,KAAK,CAACuB,UAAU,CAAC;QAC3BxB,KAAK,CAAC/B,GAAG,CAACgC,KAAK,CAAC,WAAW,CAAC;QAC5BD,KAAK,CAAC/B,GAAG,CAACgC,KAAK,CAAC2B,WAAW,CAAC;QAC5B,IAAI9B,GAAG,GAAGE,KAAK,CAACH,UAAU,CAAC2B,UAAU,CAAC;QACtC,IAAI1B,GAAG,EAAE;UACLE,KAAK,CAAC/B,GAAG,CAACgC,KAAK,CAAC,eAAe,GAAGH,GAAG,GAAG,SAAS,CAAC;UAClD,OAAO+B,KAAK,CAAC/B,GAAG,CAAC;QACrB;QACA,IAAIc,MAAM;QACV,IAAIgB,WAAW,EAAE;UACbhB,MAAM,GAAG,IAAIgB,WAAW,CAAC,CAAC;QAC9B,CAAC,MACI;UACDhB,MAAM,GAAG,CAAC,CAAC;QACf;QACA,IAAIhB,EAAE,GAAGI,KAAK,CAACL,SAAS,CAAC6B,UAAU,CAAC;QACpC,IAAI5B,EAAE,EAAE;UACJiC,KAAK,CAACjC,EAAE,CAAC,GAAGgB,MAAM;QACtB;QACA,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAGpD,MAAM,CAACqD,IAAI,CAACS,UAAU,CAAC,EAAEX,EAAE,GAAGC,EAAE,CAACzB,MAAM,EAAEwB,EAAE,EAAE,EAAE;UACjE,IAAIG,GAAG,GAAGF,EAAE,CAACD,EAAE,CAAC;UAChB,IAAIG,GAAG,KAAKhB,KAAK,CAAC3B,KAAK,EAAE;YACrB;UACJ;UACA,IAAIoB,OAAO,CAACsC,WAAW,CAAC,cAAc,EAAEnB,MAAM,EAAEI,GAAG,CAAC,EAAE;YAClD,IAAIS,KAAK,GAAGhC,OAAO,CAACC,WAAW,CAAC,cAAc,EAAEkB,MAAM,EAAEI,GAAG,CAAC;YAC5D,IAAI,CAACS,KAAK,EAAE;cACRA,KAAK,GAAGzB,KAAK,CAACV,QAAQ,CAACsB,MAAM,EAAEI,GAAG,CAAC;YACvC;YACAJ,MAAM,CAACI,GAAG,CAAC,GAAGc,qBAAoB,CAACN,UAAU,CAACR,GAAG,CAAC,EAAES,KAAK,CAAC;UAC9D,CAAC,MACI;YACDb,MAAM,CAACI,GAAG,CAAC,GAAGc,qBAAoB,CAACN,UAAU,CAACR,GAAG,CAAC,CAAC;UACvD;QACJ;QACA,OAAOJ,MAAM;MACjB,CAAC;MACD,IAAIW,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAaC,UAAU,EAAEI,WAAW,EAAE;QACtD,IAAIhB,MAAM,GAAG,EAAE;QACf,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEmB,YAAY,GAAGR,UAAU,EAAEX,EAAE,GAAGmB,YAAY,CAAC3C,MAAM,EAAEwB,EAAE,EAAE,EAAE;UACxE,IAAIhD,KAAK,GAAGmE,YAAY,CAACnB,EAAE,CAAC;UAC5B;UACAD,MAAM,CAACJ,IAAI,CAACsB,qBAAoB,CAACjE,KAAK,EAAE+D,WAAW,CAAC,CAAC;QACzD;QACA,OAAOhB,MAAM;MACjB,CAAC;MACD;MACA,IAAIY,UAAU,KAAK,IAAI,EAAE;QACrB,OAAO,IAAI;MACf;MACA;MACA,IAAIxB,KAAK,CAAChB,OAAO,CAACwC,UAAU,CAAC,EAAE;QAC3B;QACAA,UAAU,GAAGA,UAAU;QACvB,OAAOD,gBAAgB,CAACC,UAAU,EAAEI,WAAW,CAAC;MACpD;MACA;MACA,IAAI,OAAOJ,UAAU,KAAK,QAAQ,EAAE;QAChC;QACAA,UAAU,GAAGA,UAAU;QACvB,OAAOG,iBAAiB,CAACH,UAAU,EAAEI,WAAW,CAAC;MACrD;MACA,OAAOJ,UAAU;IACrB,CAAC;IACD,OAAOM,qBAAoB,CAACN,UAAU,EAAEI,WAAW,CAAC;EACxD,CAAC;EACD,OAAO5D,WAAW;AACtB,CAAC,CAAC,CAAE;AACJJ,OAAO,CAACI,WAAW,GAAGA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}