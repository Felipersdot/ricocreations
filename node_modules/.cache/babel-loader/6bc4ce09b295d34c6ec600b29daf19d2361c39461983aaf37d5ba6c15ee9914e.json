{"ast":null,"code":"import _objectSpread from \"/Users/feliperodriguez/Desktop/Git Repos/ricocreations/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { Role } from '../models/Roles';\nimport { Transport } from './Transport';\nvar USER_API = '/user/api';\nvar companyId = '749423b9-1d66-4f93-b1db-ee1526eeb981';\nvar auth = {\n  login: function login(email, password) {\n    var userCredentials = {\n      username: email,\n      password: password\n    };\n    return Transport.post(\"\".concat(USER_API, \"/auth/login\"), userCredentials);\n  }\n};\nvar account = {\n  requestPasswordResetLink: function requestPasswordResetLink(email) {\n    var config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Target-Url': \"https://\".concat(window.location.hostname, \"/passwordresetform/{userId}/{token}\")\n      }\n    };\n    return Transport.post(\"\".concat(USER_API, \"/account/requestpasswordreset\"), {\n      email: email\n    }, undefined, config);\n  },\n  resetPassword: function resetPassword(userId, token, newPassword, confirmPassword) {\n    return Transport.post(\"\".concat(USER_API, \"/account/resetpassword?userId=\").concat(userId, \"&code=\").concat(token), {\n      Password: newPassword,\n      ConfirmPassword: confirmPassword\n    });\n  },\n  getUserAgreement: function getUserAgreement() {\n    return Transport.get(\"\".concat(USER_API, \"/account/globaluseragreement\"));\n  },\n  getTermsAndConditions: function getTermsAndConditions() {\n    return Transport.get(\"\".concat(USER_API, \"/account/useragreement\"));\n  },\n  acceptTermsAndConditions: function acceptTermsAndConditions(username, password, userAgreementSignedInitials) {\n    var data = {\n      username: username,\n      password: password,\n      userAgreementSignedInitials: userAgreementSignedInitials\n    };\n    return Transport.post(\"\".concat(USER_API, \"/account/acceptuseragreement\"), data);\n  },\n  register: function register(registerModel) {\n    var config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Target-Url': \"https://\".concat(window.location.hostname, \"/emailConfirmation/{userId}/{token}\")\n      }\n    };\n    return Transport.post(\"\".concat(USER_API, \"/account/register\"), JSON.stringify(_objectSpread(_objectSpread({}, registerModel), {}, {\n      companyId: companyId\n    })), undefined, config);\n  },\n  verifyEmail: function verifyEmail(userId, token) {\n    return Transport.post(\"\".concat(USER_API, \"/account/confirmemail?userId=\").concat(userId, \"&code=\").concat(token));\n  },\n  resendEmailConfirmation: function resendEmailConfirmation(email) {\n    var config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Target-Url': \"https://\".concat(window.location.hostname, \"/emailConfirmation/{userId}/{token}\")\n      }\n    };\n    return Transport.post(\"\".concat(USER_API, \"/account/resendemailconfirmation\"), {\n      email: email\n    }, undefined, config);\n  },\n  registerToken: function registerToken(registerModel, token) {\n    var config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Target-Url': \"https://\".concat(window.location.hostname, \"/emailConfirmation/{userId}/{token}\")\n      }\n    };\n    return Transport.post(\"\".concat(USER_API, \"/account/register/token/\").concat(token), JSON.stringify(_objectSpread({}, registerModel)), undefined, config);\n  }\n};\nvar userRegistrationToken = {\n  validateToken: function validateToken(token) {\n    return Transport.get(\"\".concat(USER_API, \"/userregistrationtoken/\").concat(token, \"/validate\"));\n  },\n  sendInvitation: function sendInvitation(email, roleId) {\n    var data = {\n      email: email,\n      roleId: roleId\n    };\n    var config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Target-Url': \"https://\".concat(window.location.hostname, \"/userregistration/{token}\")\n      }\n    };\n    return Transport.post(\"\".concat(USER_API, \"/userregistrationtoken\"), data, undefined, config);\n  }\n};\nvar users = {\n  find: function find(username) {\n    return Transport.get(\"\".concat(USER_API, \"/users/name/\").concat(username));\n  }\n};\nvar roles = {\n  getExternalAllowedRoles: function getExternalAllowedRoles() {\n    return Transport.get(\"\".concat(USER_API, \"/roles/externalallowed\"), Role);\n  }\n};\nvar clientCredentials = {\n  getToken: function getToken(clientKey, clientSecret) {\n    return Transport.post(\"\".concat(USER_API, \"/clientcredentials/token\"), {\n      clientKey: clientKey,\n      clientSecret: clientSecret\n    });\n  },\n  validateToken: function validateToken(scopes) {\n    return Transport.post(\"\".concat(USER_API, \"/clientcredentials/token/validate\"), scopes);\n  }\n};\nvar companies = {\n  getCompany: function getCompany(companyId) {\n    return Transport.get(\"\".concat(USER_API, \"/companies/\").concat(companyId));\n  }\n};\n\n// eslint-disable-next-line\nexport default {\n  auth: auth,\n  account: account,\n  users: users,\n  roles: roles,\n  userRegistrationToken: userRegistrationToken,\n  clientCredentials: clientCredentials,\n  companies: companies\n};","map":{"version":3,"names":["Role","Transport","USER_API","companyId","auth","login","email","password","userCredentials","username","post","concat","account","requestPasswordResetLink","config","headers","window","location","hostname","undefined","resetPassword","userId","token","newPassword","confirmPassword","Password","ConfirmPassword","getUserAgreement","get","getTermsAndConditions","acceptTermsAndConditions","userAgreementSignedInitials","data","register","registerModel","JSON","stringify","_objectSpread","verifyEmail","resendEmailConfirmation","registerToken","userRegistrationToken","validateToken","sendInvitation","roleId","users","find","roles","getExternalAllowedRoles","clientCredentials","getToken","clientKey","clientSecret","scopes","companies","getCompany"],"sources":["/Users/feliperodriguez/Desktop/Git Repos/ricocreations/src/api/userApi.ts"],"sourcesContent":["import { AxiosPromise } from 'axios';\nimport { Role } from '../models/Roles';\nimport { User } from '../models/User';\nimport { Transport } from './Transport';\nimport { Company } from '../models/Company';\n\nconst USER_API: string = '/user/api';\n\nconst companyId = '749423b9-1d66-4f93-b1db-ee1526eeb981';\n\nconst auth = {\n    login: (email: string, password: string) => {\n        const userCredentials = {\n            username: email,\n            password: password\n        };\n        return Transport.post(`${USER_API}/auth/login`, userCredentials);\n    }\n};\n\nexport interface RegisterModel {\n    firstName: string;\n    lastName: string;\n    email: string;\n    confirmEmail: string;\n    password: string;\n    confirmPassword: string;\n    userAgreementSignedInitials: string;\n}\n\nexport interface UserRegistrationWithTokenModel {\n    firstName: string;\n    lastName: string;\n    password: string;\n    confirmPassword: string;\n    userAgreementSignedInitials: string;\n}\n\nconst account = {\n    requestPasswordResetLink: (email: string) => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Target-Url': `https://${window.location.hostname}/passwordresetform/{userId}/{token}`\n            }\n        };\n        return Transport.post(`${USER_API}/account/requestpasswordreset`, { email }, undefined, config);\n    },\n    resetPassword: (userId: string, token: string, newPassword: string, confirmPassword: string) => {\n        return Transport.post(`${USER_API}/account/resetpassword?userId=${userId}&code=${token}`, {\n            Password: newPassword,\n            ConfirmPassword: confirmPassword\n        });\n    },\n    getUserAgreement: () => {\n        return Transport.get(`${USER_API}/account/globaluseragreement`);\n    },\n    getTermsAndConditions: (): AxiosPromise<string> => {\n        return Transport.get(`${USER_API}/account/useragreement`);\n    },\n    acceptTermsAndConditions: (username: string, password: string, userAgreementSignedInitials: string) => {\n        const data = {\n            username: username,\n            password: password,\n            userAgreementSignedInitials: userAgreementSignedInitials\n        };\n\n        return Transport.post(`${USER_API}/account/acceptuseragreement`, data);\n    },\n    register: (registerModel: RegisterModel) => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Target-Url': `https://${window.location.hostname}/emailConfirmation/{userId}/{token}`\n            }\n        };\n        return Transport.post(\n            `${USER_API}/account/register`,\n            JSON.stringify({ ...registerModel, companyId }),\n            undefined,\n            config\n        );\n    },\n    verifyEmail: (userId: string, token: string) => {\n        return Transport.post(`${USER_API}/account/confirmemail?userId=${userId}&code=${token}`);\n    },\n    resendEmailConfirmation: (email: string) => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Target-Url': `https://${window.location.hostname}/emailConfirmation/{userId}/{token}`\n            }\n        };\n        return Transport.post(`${USER_API}/account/resendemailconfirmation`, { email }, undefined, config);\n    },\n\n    registerToken: (registerModel: UserRegistrationWithTokenModel, token: string) => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Target-Url': `https://${window.location.hostname}/emailConfirmation/{userId}/{token}`\n            }\n        };\n        return Transport.post(\n            `${USER_API}/account/register/token/${token}`,\n            JSON.stringify({ ...registerModel }),\n            undefined,\n            config\n        );\n    }\n};\n\nconst userRegistrationToken = {\n    validateToken: (token: string): AxiosPromise => {\n        return Transport.get(`${USER_API}/userregistrationtoken/${token}/validate`);\n    },\n    sendInvitation: (email: string, roleId: string): AxiosPromise<string> => {\n        const data = {\n            email: email,\n            roleId: roleId\n        };\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Target-Url': `https://${window.location.hostname}/userregistration/{token}`\n            }\n        };\n        return Transport.post(`${USER_API}/userregistrationtoken`, data, undefined, config);\n    }\n};\n\nconst users = {\n    find: (username: string): AxiosPromise<User> => {\n        return Transport.get(`${USER_API}/users/name/${username}`);\n    }\n};\n\nconst roles = {\n    getExternalAllowedRoles: (): AxiosPromise<Role[]> => {\n        return Transport.get(`${USER_API}/roles/externalallowed`, Role);\n    }\n};\n\nconst clientCredentials = {\n    getToken: (clientKey: string, clientSecret: string): AxiosPromise<string> => {\n        return Transport.post(`${USER_API}/clientcredentials/token`, { clientKey, clientSecret });\n    },\n    validateToken: (scopes: string[]): AxiosPromise => {\n        return Transport.post(`${USER_API}/clientcredentials/token/validate`, scopes);\n    }\n};\n\nconst companies = {\n    getCompany: (companyId: string): AxiosPromise<Company> => {\n        return Transport.get(`${USER_API}/companies/${companyId}`);\n    }\n};\n\n// eslint-disable-next-line\nexport default {\n    auth,\n    account,\n    users,\n    roles,\n    userRegistrationToken,\n    clientCredentials,\n    companies\n};\n"],"mappings":";AACA,SAASA,IAAI,QAAQ,iBAAiB;AAEtC,SAASC,SAAS,QAAQ,aAAa;AAGvC,IAAMC,QAAgB,GAAG,WAAW;AAEpC,IAAMC,SAAS,GAAG,sCAAsC;AAExD,IAAMC,IAAI,GAAG;EACTC,KAAK,EAAE,SAAPA,KAAKA,CAAGC,KAAa,EAAEC,QAAgB,EAAK;IACxC,IAAMC,eAAe,GAAG;MACpBC,QAAQ,EAAEH,KAAK;MACfC,QAAQ,EAAEA;IACd,CAAC;IACD,OAAON,SAAS,CAACS,IAAI,IAAAC,MAAA,CAAIT,QAAQ,kBAAeM,eAAe,CAAC;EACpE;AACJ,CAAC;AAoBD,IAAMI,OAAO,GAAG;EACZC,wBAAwB,EAAE,SAA1BA,wBAAwBA,CAAGP,KAAa,EAAK;IACzC,IAAMQ,MAAM,GAAG;MACXC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,YAAY,aAAAJ,MAAA,CAAaK,MAAM,CAACC,QAAQ,CAACC,QAAQ;MACrD;IACJ,CAAC;IACD,OAAOjB,SAAS,CAACS,IAAI,IAAAC,MAAA,CAAIT,QAAQ,oCAAiC;MAAEI,KAAK,EAALA;IAAM,CAAC,EAAEa,SAAS,EAAEL,MAAM,CAAC;EACnG,CAAC;EACDM,aAAa,EAAE,SAAfA,aAAaA,CAAGC,MAAc,EAAEC,KAAa,EAAEC,WAAmB,EAAEC,eAAuB,EAAK;IAC5F,OAAOvB,SAAS,CAACS,IAAI,IAAAC,MAAA,CAAIT,QAAQ,oCAAAS,MAAA,CAAiCU,MAAM,YAAAV,MAAA,CAASW,KAAK,GAAI;MACtFG,QAAQ,EAAEF,WAAW;MACrBG,eAAe,EAAEF;IACrB,CAAC,CAAC;EACN,CAAC;EACDG,gBAAgB,EAAE,SAAlBA,gBAAgBA,CAAA,EAAQ;IACpB,OAAO1B,SAAS,CAAC2B,GAAG,IAAAjB,MAAA,CAAIT,QAAQ,iCAA8B,CAAC;EACnE,CAAC;EACD2B,qBAAqB,EAAE,SAAvBA,qBAAqBA,CAAA,EAA8B;IAC/C,OAAO5B,SAAS,CAAC2B,GAAG,IAAAjB,MAAA,CAAIT,QAAQ,2BAAwB,CAAC;EAC7D,CAAC;EACD4B,wBAAwB,EAAE,SAA1BA,wBAAwBA,CAAGrB,QAAgB,EAAEF,QAAgB,EAAEwB,2BAAmC,EAAK;IACnG,IAAMC,IAAI,GAAG;MACTvB,QAAQ,EAAEA,QAAQ;MAClBF,QAAQ,EAAEA,QAAQ;MAClBwB,2BAA2B,EAAEA;IACjC,CAAC;IAED,OAAO9B,SAAS,CAACS,IAAI,IAAAC,MAAA,CAAIT,QAAQ,mCAAgC8B,IAAI,CAAC;EAC1E,CAAC;EACDC,QAAQ,EAAE,SAAVA,QAAQA,CAAGC,aAA4B,EAAK;IACxC,IAAMpB,MAAM,GAAG;MACXC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,YAAY,aAAAJ,MAAA,CAAaK,MAAM,CAACC,QAAQ,CAACC,QAAQ;MACrD;IACJ,CAAC;IACD,OAAOjB,SAAS,CAACS,IAAI,IAAAC,MAAA,CACdT,QAAQ,wBACXiC,IAAI,CAACC,SAAS,CAAAC,aAAA,CAAAA,aAAA,KAAMH,aAAa;MAAE/B,SAAS,EAATA;IAAS,EAAE,CAAC,EAC/CgB,SAAS,EACTL,MACJ,CAAC;EACL,CAAC;EACDwB,WAAW,EAAE,SAAbA,WAAWA,CAAGjB,MAAc,EAAEC,KAAa,EAAK;IAC5C,OAAOrB,SAAS,CAACS,IAAI,IAAAC,MAAA,CAAIT,QAAQ,mCAAAS,MAAA,CAAgCU,MAAM,YAAAV,MAAA,CAASW,KAAK,CAAE,CAAC;EAC5F,CAAC;EACDiB,uBAAuB,EAAE,SAAzBA,uBAAuBA,CAAGjC,KAAa,EAAK;IACxC,IAAMQ,MAAM,GAAG;MACXC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,YAAY,aAAAJ,MAAA,CAAaK,MAAM,CAACC,QAAQ,CAACC,QAAQ;MACrD;IACJ,CAAC;IACD,OAAOjB,SAAS,CAACS,IAAI,IAAAC,MAAA,CAAIT,QAAQ,uCAAoC;MAAEI,KAAK,EAALA;IAAM,CAAC,EAAEa,SAAS,EAAEL,MAAM,CAAC;EACtG,CAAC;EAED0B,aAAa,EAAE,SAAfA,aAAaA,CAAGN,aAA6C,EAAEZ,KAAa,EAAK;IAC7E,IAAMR,MAAM,GAAG;MACXC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,YAAY,aAAAJ,MAAA,CAAaK,MAAM,CAACC,QAAQ,CAACC,QAAQ;MACrD;IACJ,CAAC;IACD,OAAOjB,SAAS,CAACS,IAAI,IAAAC,MAAA,CACdT,QAAQ,8BAAAS,MAAA,CAA2BW,KAAK,GAC3Ca,IAAI,CAACC,SAAS,CAAAC,aAAA,KAAMH,aAAa,CAAE,CAAC,EACpCf,SAAS,EACTL,MACJ,CAAC;EACL;AACJ,CAAC;AAED,IAAM2B,qBAAqB,GAAG;EAC1BC,aAAa,EAAE,SAAfA,aAAaA,CAAGpB,KAAa,EAAmB;IAC5C,OAAOrB,SAAS,CAAC2B,GAAG,IAAAjB,MAAA,CAAIT,QAAQ,6BAAAS,MAAA,CAA0BW,KAAK,cAAW,CAAC;EAC/E,CAAC;EACDqB,cAAc,EAAE,SAAhBA,cAAcA,CAAGrC,KAAa,EAAEsC,MAAc,EAA2B;IACrE,IAAMZ,IAAI,GAAG;MACT1B,KAAK,EAAEA,KAAK;MACZsC,MAAM,EAAEA;IACZ,CAAC;IACD,IAAM9B,MAAM,GAAG;MACXC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,YAAY,aAAAJ,MAAA,CAAaK,MAAM,CAACC,QAAQ,CAACC,QAAQ;MACrD;IACJ,CAAC;IACD,OAAOjB,SAAS,CAACS,IAAI,IAAAC,MAAA,CAAIT,QAAQ,6BAA0B8B,IAAI,EAAEb,SAAS,EAAEL,MAAM,CAAC;EACvF;AACJ,CAAC;AAED,IAAM+B,KAAK,GAAG;EACVC,IAAI,EAAE,SAANA,IAAIA,CAAGrC,QAAgB,EAAyB;IAC5C,OAAOR,SAAS,CAAC2B,GAAG,IAAAjB,MAAA,CAAIT,QAAQ,kBAAAS,MAAA,CAAeF,QAAQ,CAAE,CAAC;EAC9D;AACJ,CAAC;AAED,IAAMsC,KAAK,GAAG;EACVC,uBAAuB,EAAE,SAAzBA,uBAAuBA,CAAA,EAA8B;IACjD,OAAO/C,SAAS,CAAC2B,GAAG,IAAAjB,MAAA,CAAIT,QAAQ,6BAA0BF,IAAI,CAAC;EACnE;AACJ,CAAC;AAED,IAAMiD,iBAAiB,GAAG;EACtBC,QAAQ,EAAE,SAAVA,QAAQA,CAAGC,SAAiB,EAAEC,YAAoB,EAA2B;IACzE,OAAOnD,SAAS,CAACS,IAAI,IAAAC,MAAA,CAAIT,QAAQ,+BAA4B;MAAEiD,SAAS,EAATA,SAAS;MAAEC,YAAY,EAAZA;IAAa,CAAC,CAAC;EAC7F,CAAC;EACDV,aAAa,EAAE,SAAfA,aAAaA,CAAGW,MAAgB,EAAmB;IAC/C,OAAOpD,SAAS,CAACS,IAAI,IAAAC,MAAA,CAAIT,QAAQ,wCAAqCmD,MAAM,CAAC;EACjF;AACJ,CAAC;AAED,IAAMC,SAAS,GAAG;EACdC,UAAU,EAAE,SAAZA,UAAUA,CAAGpD,SAAiB,EAA4B;IACtD,OAAOF,SAAS,CAAC2B,GAAG,IAAAjB,MAAA,CAAIT,QAAQ,iBAAAS,MAAA,CAAcR,SAAS,CAAE,CAAC;EAC9D;AACJ,CAAC;;AAED;AACA,eAAe;EACXC,IAAI,EAAJA,IAAI;EACJQ,OAAO,EAAPA,OAAO;EACPiC,KAAK,EAALA,KAAK;EACLE,KAAK,EAALA,KAAK;EACLN,qBAAqB,EAArBA,qBAAqB;EACrBQ,iBAAiB,EAAjBA,iBAAiB;EACjBK,SAAS,EAATA;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}