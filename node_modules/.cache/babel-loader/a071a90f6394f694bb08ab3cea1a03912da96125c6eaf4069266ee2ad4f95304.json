{"ast":null,"code":"import jwt from'jsonwebtoken';export class TokenUtils{static getRefreshToken(){let refreshToken=null;const authToken=TokenUtils.getAuthToken();if(authToken!==null){refreshToken=authToken.refresh_token;}return refreshToken;}static saveRefreshToken(refreshToken){const authToken=TokenUtils.getAuthToken();if(authToken!==null){authToken.refresh_token=refreshToken;}}static isTokenExpired(){let isExpired=true;const authToken=TokenUtils.getAuthToken();if(authToken!==null){const now=new Date();const expires=new Date(authToken['.expires']);isExpired=expires<=now;}return isExpired;}static isJwtTokenExpired(){const jwtToken=TokenUtils.getJwtToken();if(!jwtToken)return true;return jwtToken!==null&&!(jwtToken.exp&&jwtToken.exp>Date.now()/1000);}static saveAuthToken(authToken){window.localStorage.setItem(TokenUtils.AUTH_TOKEN_KEY,JSON.stringify({authToken}));}static removeAuthToken(){window.localStorage.removeItem(TokenUtils.AUTH_TOKEN_KEY);}static saveJwtToken(jwtToken){window.localStorage.setItem(TokenUtils.JWT_TOKEN_KEY,jwtToken);}static removeJwtToken(){window.localStorage.removeItem(TokenUtils.JWT_TOKEN_KEY);}static getAuthToken(){let authToken=null;const storedAuthToken=window.localStorage.getItem(TokenUtils.AUTH_TOKEN_KEY);if(storedAuthToken!==null){try{const parsedAuthToken=JSON.parse(storedAuthToken).authToken;if(parsedAuthToken){authToken=parsedAuthToken;}}catch(error){console.error('Could not parse token!');}}return authToken;}static getJwtTokenString(){return window.localStorage.getItem(TokenUtils.JWT_TOKEN_KEY);}static getJwtToken(){let tokenContent=null;const storedJwtToken=window.localStorage.getItem(TokenUtils.JWT_TOKEN_KEY);if(storedJwtToken!==null){tokenContent=jwt.decode(storedJwtToken);}return tokenContent;}}TokenUtils.AUTH_TOKEN_KEY='authToken';TokenUtils.JWT_TOKEN_KEY='jwt';","map":{"version":3,"names":["jwt","TokenUtils","getRefreshToken","refreshToken","authToken","getAuthToken","refresh_token","saveRefreshToken","isTokenExpired","isExpired","now","Date","expires","isJwtTokenExpired","jwtToken","getJwtToken","exp","saveAuthToken","window","localStorage","setItem","AUTH_TOKEN_KEY","JSON","stringify","removeAuthToken","removeItem","saveJwtToken","JWT_TOKEN_KEY","removeJwtToken","storedAuthToken","getItem","parsedAuthToken","parse","error","console","getJwtTokenString","tokenContent","storedJwtToken","decode"],"sources":["/Users/feliperodriguez/Desktop/Git Repos/ricocreations/src/utils/TokenUtils.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\n\nimport { IOmniAuthToken } from '../models/auth/IOmniAuthToken';\nimport { IMyBuildJSONWebToken } from '../models/auth/IMyBuildJsonWebToken';\n\nexport class TokenUtils {\n    public static getRefreshToken(): string | null {\n        let refreshToken: string | null = null;\n        const authToken: IOmniAuthToken | null = TokenUtils.getAuthToken();\n        if (authToken !== null) {\n            refreshToken = authToken.refresh_token;\n        }\n        return refreshToken;\n    }\n\n    public static saveRefreshToken(refreshToken: string) {\n        const authToken: IOmniAuthToken | null = TokenUtils.getAuthToken();\n        if (authToken !== null) {\n            authToken.refresh_token = refreshToken;\n        }\n    }\n\n    public static isTokenExpired(): boolean {\n        let isExpired: boolean = true;\n\n        const authToken: IOmniAuthToken | null = TokenUtils.getAuthToken();\n        if (authToken !== null) {\n            const now = new Date();\n            const expires = new Date(authToken['.expires']);\n            isExpired = expires <= now;\n        }\n\n        return isExpired;\n    }\n\n    public static isJwtTokenExpired(): boolean {\n        const jwtToken: IMyBuildJSONWebToken | null = TokenUtils.getJwtToken();\n\n        if (!jwtToken) return true;\n\n        return jwtToken !== null && !(jwtToken.exp && jwtToken.exp > Date.now() / 1000);\n    }\n\n    public static saveAuthToken(authToken: IOmniAuthToken) {\n        window.localStorage.setItem(TokenUtils.AUTH_TOKEN_KEY, JSON.stringify({ authToken }));\n    }\n\n    public static removeAuthToken() {\n        window.localStorage.removeItem(TokenUtils.AUTH_TOKEN_KEY);\n    }\n\n    public static saveJwtToken(jwtToken: string) {\n        window.localStorage.setItem(TokenUtils.JWT_TOKEN_KEY, jwtToken);\n    }\n\n    public static removeJwtToken() {\n        window.localStorage.removeItem(TokenUtils.JWT_TOKEN_KEY);\n    }\n\n    public static getAuthToken(): IOmniAuthToken | null {\n        let authToken: IOmniAuthToken | null = null;\n        const storedAuthToken: string | null = window.localStorage.getItem(TokenUtils.AUTH_TOKEN_KEY);\n        if (storedAuthToken !== null) {\n            try {\n                const parsedAuthToken: IOmniAuthToken = JSON.parse(storedAuthToken).authToken;\n                if (parsedAuthToken) {\n                    authToken = parsedAuthToken;\n                }\n            } catch (error) {\n                console.error('Could not parse token!');\n            }\n        }\n        return authToken;\n    }\n\n    public static getJwtTokenString(): string | null {\n        return window.localStorage.getItem(TokenUtils.JWT_TOKEN_KEY);\n    }\n\n    public static getJwtToken(): IMyBuildJSONWebToken | null {\n        let tokenContent: IMyBuildJSONWebToken | null = null;\n        const storedJwtToken: string | null = window.localStorage.getItem(TokenUtils.JWT_TOKEN_KEY);\n        if (storedJwtToken !== null) {\n            tokenContent = jwt.decode(storedJwtToken) as IMyBuildJSONWebToken;\n        }\n\n        return tokenContent;\n    }\n\n    private static readonly AUTH_TOKEN_KEY: string = 'authToken';\n    private static readonly JWT_TOKEN_KEY: string = 'jwt';\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}